return(FALSE)
}
}
# # Draw the number of nodes in generation i, n[i]
# n <- c()
# # Ancestor function
# h <- list()
# # Labels
# labs <- list()
# for (i in 1:4) {
#   if(i == 1){
#     n[i] <- rpois(1, 2)
#     h[[i]] <- rep(0, n[i])
#   }else{
#     h[[i]] <- integer(0)
#     if(n[i-1] > 0){
#       for (j in 1:n[i-1]) {
#         h[[i]] <- c(h[[i]], rep(j, rpois(1, 2)))
#       }
#     }
#     n[i] <- length(h[[i]])
#   }
#   labs[[i]] <- sample(1:N, n[i], replace = T)
# }
#
# # Get the ancestry of person 5
# # Also return FALSE if person 1 appears again
# if(sum(5 == labs[[4]]) != 1 | 1 %in% unlist(labs)){
#   return(FALSE)
# }else{
#   anc <- which(labs[[4]] == 5)
#   for (i in 4:2) {
#     anc <- c(h[[i]][anc[1]], anc)
#   }
# }
# all_labs <- unlist(labs)
# is_unique <- c()
# for (i in 1:4) {
#   if(sum(labs[[i]][anc[i]] == all_labs) == 1){
#     is_unique[i] <- T
#   }else{
#     is_unique[i] <- F
#   }
# }
#
# if(all(is_unique)){
#   return(T)
# }else{
#   return(F)
# }
}
set.seed(1)
simulate_unique(1, N)
N <- 10
res_unique <- mclapply(1:1e6, simulate_unique, N = N, mc.cores = 12)
mean(unlist(res_unique))
res_unique <- mclapply(1:1e6, simulate_unique, N = N, mc.cores = 12)
mean(unlist(res_unique))
# Draw the number of nodes in generation i, n[i]
n <- c()
# Ancestor function
h <- list()
# Labels
labs <- list()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
h[[i]] <- rep(0, n[i])
}else{
h[[i]] <- integer(0)
if(n[i-1] > 0){
for (j in 1:n[i-1]) {
h[[i]] <- c(h[[i]], rep(j, rpois(1, 2)))
}
}
n[i] <- length(h[[i]])
}
labs[[i]] <- sample(1:N, n[i], replace = T)
}
labs
sum(5 == labs[[4]]) != 1
anc <- which(labs[[4]] == 5)
for (i in 4:2) {
anc <- c(h[[i]][anc[1]], anc)
}
anc
i=1
sum(labs[[i]][anc[i]] == all_labs)
all_labs <- unlist(labs)
is_unique <- c()
sum(labs[[i]][anc[i]] == all_labs)
i = 4
labs[[i]][anc[i]]
sum(labs[[i]][anc[i]] == all_labs)
# Function that returns TRUE if the labeled Galton-Watson process contains an isomorphic subtree to (R,g) such that A(L) = B(phi(L)) and all labels in this subtree appear exacty once; FALSE otherwise.
simulate_unique <- function(z, N){
# Draw the number of nodes in generation i, n[i]
# n <- c()
# for (i in 1:4) {
#   if(i == 1){
#     n[i] <- rpois(1, 2)
#   }else{
#     # Sum of k i.i.d. Pois(2) r.v.s is Pois(2k)
#     n[i] <- rpois(1, 2*n[i-1])
#   }
# }
#
# # Does "5" appear exactly once in the 4th generation?
# if(rbinom(1, n[4], 1/N) != 1){
#   return(FALSE)
# }else{
#   # Randomly select the identities of the path leading to node 5
#   path <- c(1, sample(1:N, 3, replace = T), 5)
#
#   # Randomly select the identities of everyone not on the path
#   notpath <- c(
#     sample(1:N, sum(n[1:3]) - 3, replace = T),
#     sample(1:(N-1), n[4] - 1, replace = T)
#   )
#
#   if(length(intersect(path, notpath)) == 0){
#     return(TRUE)
#   }else{
#     return(FALSE)
#   }
# }
# Draw the number of nodes in generation i, n[i]
n <- c()
# Ancestor function
h <- list()
# Labels
labs <- list()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
h[[i]] <- rep(0, n[i])
}else{
h[[i]] <- integer(0)
if(n[i-1] > 0){
for (j in 1:n[i-1]) {
h[[i]] <- c(h[[i]], rep(j, rpois(1, 2)))
}
}
n[i] <- length(h[[i]])
}
labs[[i]] <- sample(1:N, n[i], replace = T)
}
# Get the ancestry of person 5
# Also return FALSE if person 1 appears again
if(sum(5 == labs[[4]]) != 1 | 1 %in% unlist(labs)){
return(FALSE)
}else{
anc <- which(labs[[4]] == 5)
for (i in 4:2) {
anc <- c(h[[i]][anc[1]], anc)
}
}
all_labs <- unlist(labs)
is_unique <- c()
for (i in 1:4) {
if(sum(labs[[i]][anc[i]] == all_labs) == 1){
is_unique[i] <- T
}else{
is_unique[i] <- F
}
}
if(all(is_unique)){
return(T)
}else{
return(F)
}
}
set.seed(1)
simulate_unique(1, N)
N <- 10
res_unique <- mclapply(1:1e6, simulate_unique, N = N, mc.cores = 12)
mean(unlist(res_unique))
# Draw the number of nodes in generation i, n[i]
n <- c()
# Ancestor function
h <- list()
# Labels
labs <- list()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
h[[i]] <- rep(0, n[i])
}else{
h[[i]] <- integer(0)
if(n[i-1] > 0){
for (j in 1:n[i-1]) {
h[[i]] <- c(h[[i]], rep(j, rpois(1, 2)))
}
}
n[i] <- length(h[[i]])
}
labs[[i]] <- sample(1:N, n[i], replace = T)
}
labs
# Function that returns TRUE if the labeled Galton-Watson process contains an isomorphic subtree to (R,g) such that A(L) = B(phi(L)) and all labels in this subtree appear exacty once; FALSE otherwise.
simulate_unique <- function(z, N){
# Draw the number of nodes in generation i, n[i]
n <- c()
labs <- list()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
}else{
# Sum of k i.i.d. Pois(2) r.v.s is Pois(2k)
n[i] <- rpois(1, 2*n[i-1])
}
labs[[i]] <- sample(1:N, n[i], replace = T)
}
# Does "5" appear exactly once in the 4th generation?
if(sum(labs[[4]] == 5) != 1){
return(FALSE)
}else{
# Randomly select the identities of the path leading to node 5
path <- 1
for (i in 1:3) {
who <- ifelse(n[i] == 1, n[i], sample(1:n[i], 1))
path <- c(path, labs[[i]][who])
labs[[i]] <- labs[[i]][-who]
}
path <- c(path, 5)
labs[[4]] <- labs[[4]][-which(labs[[4]] == 5)]
if(length(intersect(path, unlist(labs))) == 0){
return(TRUE)
}else{
return(FALSE)
}
}
# # Draw the number of nodes in generation i, n[i]
# n <- c()
# # Ancestor function
# h <- list()
# # Labels
# labs <- list()
# for (i in 1:4) {
#   if(i == 1){
#     n[i] <- rpois(1, 2)
#     h[[i]] <- rep(0, n[i])
#   }else{
#     h[[i]] <- integer(0)
#     if(n[i-1] > 0){
#       for (j in 1:n[i-1]) {
#         h[[i]] <- c(h[[i]], rep(j, rpois(1, 2)))
#       }
#     }
#     n[i] <- length(h[[i]])
#   }
#   labs[[i]] <- sample(1:N, n[i], replace = T)
# }
#
# # Get the ancestry of person 5
# # Also return FALSE if person 1 appears again
# if(sum(5 == labs[[4]]) != 1 | 1 %in% unlist(labs)){
#   return(FALSE)
# }else{
#   anc <- which(labs[[4]] == 5)
#   for (i in 4:2) {
#     anc <- c(h[[i]][anc[1]], anc)
#   }
# }
# all_labs <- unlist(labs)
# is_unique <- c()
# for (i in 1:4) {
#   if(sum(labs[[i]][anc[i]] == all_labs) == 1){
#     is_unique[i] <- T
#   }else{
#     is_unique[i] <- F
#   }
# }
#
# if(all(is_unique)){
#   return(T)
# }else{
#   return(F)
# }
}
set.seed(1)
simulate_unique(1, N)
N <- 10
res_unique <- mclapply(1:1e6, simulate_unique, N = N, mc.cores = 12)
mean(unlist(res_unique))
n <- c()
labs <- list()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
}else{
# Sum of k i.i.d. Pois(2) r.v.s is Pois(2k)
n[i] <- rpois(1, 2*n[i-1])
}
labs[[i]] <- sample(1:N, n[i], replace = T)
}
sum(labs[[4]] == 5) != 1
labs
# Randomly select the identities of the path leading to node 5
path <- 1
for (i in 1:3) {
who <- ifelse(n[i] == 1, n[i], sample(1:n[i], 1))
path <- c(path, labs[[i]][who])
labs[[i]] <- labs[[i]][-who]
}
path
who
i
labs[[i]]
labs[[i]][who]
path
unlist(labs)
# Function that returns TRUE if the finite-population Galton-Watson process contains a UNIQUE isomorphic subtree to (R,g) such that kappa(L) = Lambda(phi(L)); FALSE otherwise.
simulate_unique <- function(z, N){
# Draw the number of nodes in generation i, n[i]
n <- c()
# Ancestor function
h <- list()
# Labels
labs <- list()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
h[[i]] <- rep(0, n[i])
}else{
h[[i]] <- integer(0)
if(n[i-1] > 0){
for (j in 1:n[i-1]) {
h[[i]] <- c(h[[i]], rep(j, rpois(1, 2)))
}
}
n[i] <- length(h[[i]])
}
labs[[i]] <- sample(1:N, n[i], replace = T)
}
#labs
# Get the ancestry of person 1
if(sum(1 == labs[[4]]) != 1){
return(FALSE)
}else{
anc <- which(labs[[4]] == 1)
for (i in 4:2) {
anc <- c(h[[i]][anc[1]], anc)
}
}
all_labs <- unlist(labs)
is_unique <- c()
for (i in 1:4) {
if(sum(labs[[i]][anc[i]] == all_labs) == 1){
is_unique[i] <- T
}else{
is_unique[i] <- F
}
}
if(all(is_unique)){
return(T)
}else{
return(F)
}
}
N <- 10
res_unique <- mclapply(1:1e6, simulate_unique, N = N, mc.cores = 12)
mean(unlist(res_unique))
# Poisson(2) MGF
pois_mgf <- function(t){
exp(2 * (exp(t) - 1))
}
# q1 through q4
get_qs <- function(N){
q <- rep(NA, 4)
q[4] <- 1 - 4/N
for (i in 3:1) {
q[i] <- (1 - 4/N) * pois_mgf(log(q[i+1]))
}
q
}
qs <- get_qs(N)
# Degree sequence, starting at root thru 3rd generation (4th generation irrelevant)
ds <- rep(1, 4)
# Coalescent
coalescent <- function(N){
choose(N-1, 3) * factorial(3) * (1/N)^sum(ds) * prod((exp((get_qs(N) - 1)*2) * 2^ds) / factorial(ds))
}
coalescent(N)
## Code for Example B.1
# Function that returns TRUE if the labeled Galton-Watson process contains an isomorphic subtree to (R,g) such that A(L) = B(phi(L)); FALSE otherwise.
simulate <- function(z, N){
# Draw the number of nodes in generation i, n[i]
n <- c()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
}else{
# Sum of k i.i.d. Pois(2) r.v.s is Pois(2k)
n[i] <- rpois(1, 2*n[i-1])
}
}
# Whether generation 4 includes the label \kappa(r_{41}) = 4 is Bernoulli with probability 1 - (9/10)^n[4]
if(runif(1) < 1 - ((N-1)/N)^n[4]){
return(T)
}else{
return(F)
}
}
res <- mclapply(1:1e6, simulate, N = 10, mc.cores = 12)
## Code for Example B.1
library(parallel)
# Function that returns TRUE if the labeled Galton-Watson process contains an isomorphic subtree to (R,g) such that A(L) = B(phi(L)); FALSE otherwise.
simulate <- function(z, N){
# Draw the number of nodes in generation i, n[i]
n <- c()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
}else{
# Sum of k i.i.d. Pois(2) r.v.s is Pois(2k)
n[i] <- rpois(1, 2*n[i-1])
}
}
# Whether generation 4 includes the label \kappa(r_{41}) = 4 is Bernoulli with probability 1 - (9/10)^n[4]
if(runif(1) < 1 - ((N-1)/N)^n[4]){
return(T)
}else{
return(F)
}
}
res <- mclapply(1:1e6, simulate, N = 10, mc.cores = 12)
mean(unlist(res))
## Simulation for Example 3.6
library(parallel)
# Function that returns TRUE if the labeled Galton-Watson process contains a UNIQUE isomorphic subtree to (R,g) such that A(L) = B(phi(L)); FALSE otherwise.
simulate_unique <- function(z, N){
# Draw the number of nodes in generation i, n[i]
n <- c()
# Ancestor function
h <- list()
# Labels
labs <- list()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
h[[i]] <- rep(0, n[i])
}else{
h[[i]] <- integer(0)
if(n[i-1] > 0){
for (j in 1:n[i-1]) {
h[[i]] <- c(h[[i]], rep(j, rpois(1, 2)))
}
}
n[i] <- length(h[[i]])
}
labs[[i]] <- sample(1:N, n[i], replace = T)
}
#labs
# Get the ancestry of person 1
if(sum(1 == labs[[4]]) != 1){
return(FALSE)
}else{
anc <- which(labs[[4]] == 1)
for (i in 4:2) {
anc <- c(h[[i]][anc[1]], anc)
}
}
all_labs <- unlist(labs)
is_unique <- c()
for (i in 1:4) {
if(sum(labs[[i]][anc[i]] == all_labs) == 1){
is_unique[i] <- T
}else{
is_unique[i] <- F
}
}
if(all(is_unique)){
return(T)
}else{
return(F)
}
}
# Poisson(2) MGF
pois_mgf <- function(t){
exp(2 * (exp(t) - 1))
}
# q1 through q4
get_qs <- function(N){
q <- rep(NA, 4)
q[4] <- 1 - 4/N
for (i in 3:1) {
q[i] <- (1 - 4/N) * pois_mgf(log(q[i+1]))
}
q
}
# Degree sequence, starting at root thru 3rd generation (4th generation irrelevant)
ds <- rep(1, 4)
# Coalescent
coalescent <- function(N){
qs <- get_qs(N)
choose(N-1, 3) * factorial(3) * (1/N)^sum(ds) * prod((exp((get_qs(N) - 1)*2) * 2^ds) / factorial(ds))
}
# Simulation for N = 10
N <- 10
res_unique <- mclapply(1:1e6, simulate_unique, N = N, mc.cores = 12)
mean(unlist(res_unique))
coalescent(N)
# Simulation for N = 100
N <- 100
res_unique <- mclapply(1:1e6, simulate_unique, N = N, mc.cores = 12)
mean(unlist(res_unique))
coalescent(N)
citation()
citation("ape")
version("ape")
packageVersion("ape")
