# q1 through q4
get_qs <- function(N){
q <- rep(NA, 4)
q[4] <- 1 - 4/N
for (i in 3:1) {
q[i] <- (1 - 4/N) * pois_mgf(log(q[i+1]))
}
q
}
qs <- get_qs(N)
# Degree sequence, starting at root thru 3rd generation (4th generation irrelevant)
ds <- rep(1, 4)
# Coalescent
coalescent <- function(N){
choose(N-1, 3) * factorial(3) * (1/N)^sum(ds) * prod((exp((get_qs(N) - 1)*2) * 2^ds) / factorial(ds))
}
coalescent(N)
#(1/N) * (exp((1 - 1/N) - 1) * 2^ds)
qs <- get_qs(N)
qs
coalescent(N)
simulate_unique <- function(z, N){
# Draw the number of nodes in generation i, n[i]
n <- c()
# Ancestor function
h <- list()
# Labels
labs <- list()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
h[[i]] <- rep(0, n[i])
}else{
h[[i]] <- integer(0)
if(n[i-1] > 0){
for (j in 1:n[i-1]) {
h[[i]] <- c(h[[i]], rep(j, rpois(1, 2)))
}
}
n[i] <- length(h[[i]])
}
labs[[i]] <- sample(1:N, n[i], replace = T)
}
#labs
# Get the ancestry of person 1
if(sum(1 == labs[[4]]) != 1){
return(FALSE)
}else{
anc <- which(labs[[4]] == 1)
for (i in 4:2) {
anc <- c(h[[i]][anc[1]], anc)
}
}
all_labs <- unlist(labs)
is_unique <- c()
for (i in 1:4) {
if(sum(labs[[i]][anc[i]] == all_labs) == 1){
is_unique[i] <- T
}else{
is_unique[i] <- F
}
}
if(all(is_unique)){
return(T)
}else{
return(F)
}
}
N <- 10
res_unique <- mclapply(1:1e6, simulate_unique, N = N, mc.cores = 12)
## Simulation for Example 3.6
library(parallel)
# Function that returns TRUE if the finite-population Galton-Watson process contains a UNIQUE isomorphic subtree to (R,g) such that kappa(L) = Lambda(phi(L)); FALSE otherwise.
simulate_unique <- function(z, N){
# Draw the number of nodes in generation i, n[i]
n <- c()
# Ancestor function
h <- list()
# Labels
labs <- list()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
h[[i]] <- rep(0, n[i])
}else{
h[[i]] <- integer(0)
if(n[i-1] > 0){
for (j in 1:n[i-1]) {
h[[i]] <- c(h[[i]], rep(j, rpois(1, 2)))
}
}
n[i] <- length(h[[i]])
}
labs[[i]] <- sample(1:N, n[i], replace = T)
}
#labs
# Get the ancestry of person 1
if(sum(1 == labs[[4]]) != 1){
return(FALSE)
}else{
anc <- which(labs[[4]] == 1)
for (i in 4:2) {
anc <- c(h[[i]][anc[1]], anc)
}
}
all_labs <- unlist(labs)
is_unique <- c()
for (i in 1:4) {
if(sum(labs[[i]][anc[i]] == all_labs) == 1){
is_unique[i] <- T
}else{
is_unique[i] <- F
}
}
if(all(is_unique)){
return(T)
}else{
return(F)
}
}
N <- 10
res_unique <- mclapply(1:1e6, simulate_unique, N = N, mc.cores = 12)
mean(unlist(res_unique))
# Poisson(2) MGF
pois_mgf <- function(t){
exp(2 * (exp(t) - 1))
}
# q1 through q4
get_qs <- function(N){
q <- rep(NA, 4)
q[4] <- 1 - 4/N
for (i in 3:1) {
q[i] <- (1 - 4/N) * pois_mgf(log(q[i+1]))
}
q
}
qs <- get_qs(N)
# Degree sequence, starting at root thru 3rd generation (4th generation irrelevant)
ds <- rep(1, 4)
# Coalescent
coalescent <- function(N){
choose(N-1, 3) * factorial(3) * (1/N)^sum(ds) * prod((exp((get_qs(N) - 1)*2) * 2^ds) / factorial(ds))
}
coalescent(N)
#(1/N) * (exp((1 - 1/N) - 1) * 2^ds)
# Function that returns TRUE if the finite-population Galton-Watson process contains a UNIQUE isomorphic subtree to (R,g) such that kappa(L) = Lambda(phi(L)); FALSE otherwise.
simulate_unique <- function(z, N){
# Draw the number of nodes in generation i, n[i]
n <- c()
# Ancestor function
h <- list()
# Labels
labs <- list()
for (i in 1:4) {
if(i == 1){
n[i] <- rpois(1, 2)
h[[i]] <- rep(0, n[i])
}else{
h[[i]] <- integer(0)
if(n[i-1] > 0){
for (j in 1:n[i-1]) {
h[[i]] <- c(h[[i]], rep(j, rpois(1, 2)))
}
}
n[i] <- length(h[[i]])
}
labs[[i]] <- sample(1:N, n[i], replace = T)
}
#labs
# Get the ancestry of person 1
if(sum(1 == labs[[4]]) != 1){
return(FALSE)
}else{
anc <- which(labs[[4]] == 1)
for (i in 4:2) {
anc <- c(h[[i]][anc[1]], anc)
}
}
all_labs <- unlist(labs)
is_unique <- c()
for (i in 1:4) {
if(sum(labs[[i]][anc[i]] == all_labs) == 1){
is_unique[i] <- T
}else{
is_unique[i] <- F
}
}
if(all(is_unique)){
return(T)
}else{
return(F)
}
}
N <- 100
res_unique <- mclapply(1:1e6, simulate_unique, N = N, mc.cores = 12)
mean(unlist(res_unique))
# Poisson(2) MGF
pois_mgf <- function(t){
exp(2 * (exp(t) - 1))
}
# q1 through q4
get_qs <- function(N){
q <- rep(NA, 4)
q[4] <- 1 - 4/N
for (i in 3:1) {
q[i] <- (1 - 4/N) * pois_mgf(log(q[i+1]))
}
q
}
qs <- get_qs(N)
# Degree sequence, starting at root thru 3rd generation (4th generation irrelevant)
ds <- rep(1, 4)
# Coalescent
coalescent <- function(N){
choose(N-1, 3) * factorial(3) * (1/N)^sum(ds) * prod((exp((get_qs(N) - 1)*2) * 2^ds) / factorial(ds))
}
coalescent(N)
#(1/N) * (exp((1 - 1/N) - 1) * 2^ds)
library(ape)
read.tree("aligned.fasta.treefile")
plot(read.tree("aligned.fasta.treefile"))
t <- read.tree("aligned.fasta.treefile")
t
names(t) <- paste(1:170)
labels(t)
t$tip.label
names(t) <-
t$tip.label <- paste(1:170)
t$tip.label <- paste(1:170)
plot(t)
keep.tip(t, paste(129:130))
keep.tip(t, paste(1:130))
t2 <- keep.tip(t, paste(1:130))
plot(t2)
t2 <- keep.tip(t, paste(2:130))
plot(t2)
t2 <- keep.tip(t, paste(2:126))
plot(t2)
tips <- data.frame(
x = c(5,5,5,5,5, 4,4, 3, 2),
y = c(1,2,3,4,5, 1.5, 3.5, 2.5, 3.75 )
)
plot(tips$x, tips$y)
1.5 + 3.75
5.25/2
tips <- data.frame(
x = c(5,5,5,5,5, 4,4, 3, 2, 1),
y = c(1,2,3,4,5, 1.5, 3.5, 3.75, 2.625, 2.625)
)
plot(tips$x, tips$y)
5.75/2
tips <- data.frame(
x = c(5,5,5,5,5, 4,4, 3, 2, 1),
y = c(1,2,3,4,5, 1.5, 3.5, 4.25, 2.875, 2.875)
)
plot(tips$x, tips$y)
library(ape)
t <- c(5,5,5,5,5, 4,4, 3, 2, 1)
thetas <- c(1,2,3,4,5, 1.5, 3.5, 4.25, 2.875, 2.875)
h <- c(6,6,7,7,8,9,8,9, 10)
n <- length(h)
# vertical segments
xs <- c()
ystart <- c()
yend <- c()
for (i in 1:n) {
kids <- which(h == i)
if(length(kids) > 0){
xs <- c(xs, t[i])
ystart <- c(ystart, min(thetas[kids]))
yend <- c(yend, max(thetas[kids]))
}
}
big <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.1) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.1) +
geom_point(mapping= aes(x = df_standard$x, y = df_standard$y, color = df_standard$lineage), size = 0.5) +
scale_color_manual(values = colors, name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
library(ggplot2)
library(ggplot2)
t <- c(5,5,5,5,5, 4,4, 3, 2, 1)
thetas <- c(1,2,3,4,5, 1.5, 3.5, 4.25, 2.875, 2.875)
h <- c(6,6,7,7,8,9,8,9, 10)
n <- length(h)
# vertical segments
xs <- c()
ystart <- c()
yend <- c()
for (i in 1:n) {
kids <- which(h == i)
if(length(kids) > 0){
xs <- c(xs, t[i])
ystart <- c(ystart, min(thetas[kids]))
yend <- c(yend, max(thetas[kids]))
}
}
big <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.1) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.1) +
geom_point(mapping= aes(x = df_standard$x, y = df_standard$y, color = df_standard$lineage), size = 0.5) +
scale_color_manual(values = colors, name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.1) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.1) +
geom_point(mapping= aes(x = df_standard$x, y = df_standard$y, color = df_standard$lineage), size = 0.5) +
scale_color_manual(values = colors, name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
t[h]
t <- c(5,5,5,5,5, 4,4, 3, 2, 1)
thetas <- c(1,2,3,4,5, 1.5, 3.5, 4.25, 2.875, 2.875)
h <- c(6,6,7,7,8,9,8,9,10,NA)
n <- length(h)
# vertical segments
xs <- c()
ystart <- c()
yend <- c()
for (i in 1:n) {
kids <- which(h == i)
if(length(kids) > 0){
xs <- c(xs, t[i])
ystart <- c(ystart, min(thetas[kids]))
yend <- c(yend, max(thetas[kids]))
}
}
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.1) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.1) +
geom_point(mapping= aes(x = df_standard$x, y = df_standard$y, color = df_standard$lineage), size = 0.5) +
scale_color_manual(values = colors, name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
lin <- factor(c(1,1,1,2,2,NA,NA,NA,NA,NA))
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.1) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.1) +
geom_point(mapping= aes(x = t, y = thetas, color = lin), size = 0.5) +
scale_color_manual(values = colors, name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.1) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.1) +
geom_point(mapping= aes(x = t, y = thetas, color = lin), size = 0.5) +
#scale_color_manual(values = colors, name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
lin <- c("Variant B", "Variant B", "Variant A", "Variant A", "Variant A", rep(NA, 5))
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.1) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.1) +
geom_point(mapping= aes(x = t, y = thetas, color = lin), size = 0.5) +
#scale_color_manual(values = colors, name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
Lineage <- c("Variant B", "Variant B", "Variant A", "Variant A", "Variant A")
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.1) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.1) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 0.5) +
#scale_color_manual(values = colors, name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.1) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
scale_color_manual(values = c("red", "blue"), name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.5) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
scale_color_manual(values = c("red", "blue"), name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.5) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
scale_color_manual(values = c("blue", "red"), name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.5) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
geom_point(mapping = aes(x = 3.25, y = 1.5)) +
scale_color_manual(values = c("blue", "red"), name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.5) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
geom_point(mapping = aes(x = 3.25, y = 1.5)) +
scale_color_manual(values = c("blue", "red"), shape = 5, name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.5) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
geom_point(mapping = aes(x = 3.25, y = 1.5), shape = 5) +
scale_color_manual(values = c("blue", "red"), name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.5) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
geom_point(mapping = aes(x = 3.25, y = 1.5), shape = 4) +
scale_color_manual(values = c("blue", "red"), name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.5) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
geom_point(mapping = aes(x = 3.25, y = 1.5), shape = 4, size = 2, color = "red") +
scale_color_manual(values = c("blue", "red"), name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.5) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
geom_point(mapping = aes(x = 3.25, y = 1.5), shape = 4, size = 4, color = "red") +
scale_color_manual(values = c("blue", "red"), name = "Lineage") +
xlab("Evolutionary Time (days)") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.5) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
geom_point(mapping = aes(x = 3.25, y = 1.5), shape = 4, size = 4, color = "red") +
scale_color_manual(values = c("blue", "red"), name = "Lineage") +
xlab("Evolutionary Time") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank())
phy
ggsave(file = "./figs/example_phylogeny.pdf", width = 5, height = 3)
ggsave(file = "./figs/example_phylogeny.png", width = 5, height = 3)
phy <- ggplot() +
geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.5) +
geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.5) +
geom_point(mapping= aes(x = t[1:5], y = thetas[1:5], color = Lineage), size = 2) +
geom_point(mapping = aes(x = 3.25, y = 1.5), shape = 4, size = 4, color = "red") +
scale_color_manual(values = c("blue", "red"), name = "Lineage") +
xlab("Evolutionary Time") +
scale_y_continuous(breaks = NULL) +
theme_minimal() +
theme(axis.title.y = element_blank(), legend.position = 'top')
phy
ggsave(file = "./figs/example_phylogeny.pdf", width = 5, height = 3)
ggsave(file = "./figs/example_phylogeny.png", width = 5, height = 3)
10* log10(0.05)
