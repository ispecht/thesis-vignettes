### Visualize MCMC output

library(ggplot2)
library(ggraph)
library(igraph)
library(ape)

# Load in results
load("output.RData")

mus <- c()
ps <- c()
bs <- c()
vs <- c()
for (i in 1:10000) {
  mus[i] <- output[[i]]$mu
  ps[i] <- output[[i]]$p
  bs[i] <- output[[i]]$b
  vs[i] <- output[[i]]$v
}

h <- output[[10000]]$h
t <- output[[10000]]$t
n <- length(h)


## Lineage by case
# Read in sequence names and metadata
cons <- read.FASTA("~/Desktop/input_data_huge/aligned.fasta")
names <- names(cons)
meta <- read.csv("~/Desktop/input_data_huge/metadata.csv")
lin <- meta$Sequence.Nextclade.Clade[match(names, meta$case)]
lineage <- rep("Unsampled", n)
lineage[2:(length(lin) + 1)] <- lin

# Data cleaning
lineage[lineage == "20C"] <- "20C (Epsilon)"
lineage[lineage == "21L"] <- "21L (Omicron)"
lineage[lineage == "22A"] <- "22A (Omicron)"
lineage[lineage == "22B"] <- "22B (Omicron)"
lineage[lineage == "22D"] <- "22D (Omicron)"
lineage[lineage == "22E"] <- "22E (Omicron)"
lineage[lineage == "22F"] <- "22F (Omicron)"
lineage[lineage == "23A"] <- "23A (Omicron)"


# Reverse BFS order
bfs2 <- function(h){
  queue <- 1
  explored <- c()
  while (length(queue) > 0) {
    queue <- c(queue, which(h == queue[1]))
    explored <- c(explored, queue[1])
    queue <- queue[-1]
    #print(length(explored))
  }
  return(explored)
}

# Impute lineages of unobserved nodes
for (i in rev(bfs(1, h))) {
  if(lineage[i] == "Unsampled"){
    kids <- which(h == i)
    lineage[i] <- names(which.max(table(lineage[kids])))
  }
}

# BFS order, expanding nodes by lineage
bfs_lineage <- function(h){
  queue <- 1
  explored <- c()
  while (length(queue) > 0) {
    who <- which(h == queue[1])
    who <- who[sort.int(lineage[who], index.return = T)$ix]
    queue <- c(queue, which(h == queue[1]))
    explored <- c(explored, queue[1])
    queue <- queue[-1]
    #print(length(explored))
  }
  return(explored)
}

# DFS order, expanding nodes by lineage
dfs_lineage <- function(h){
  stack <- 1
  explored <- c()
  while (length(stack) > 0) {
    who <- which(h == stack[1])
    who <- who[sort.int(lineage[who], index.return = T)$ix]
    explored <- c(explored, stack[1])
    stack <- stack[-1]
    stack <- c(who, stack)

    print(length(explored))
  }
  return(explored)
}



ord <- rev(dfs_lineage(h))

# Leaves
leaves <- which(!(1:n %in% h))
n_leaves <- length(leaves)

# Lineage of each leaf
#leaf_lineage <- lineage[leaves]




# Angle of each node
thetas <- c()
#thetas[leaves[sort.int(leaf_lineage, index.return = T)$ix]] <- (1:n_leaves) * 2* pi / n_leaves

leaf_count <- 0

for (i in ord) {
  if(!(i %in% leaves)){
    kids <- which(h == i)
    thetas[i] <- mean(thetas[kids])
  }else{
    thetas[i] <- leaf_count * 2 * pi / n_leaves
    leaf_count <- leaf_count + 1
  }
}

# Reset unsampled lineages to unsampled
lineage[(length(lin) + 2):length(lineage)] <- "Unsampled"
lineage[1] <- "Unsampled"
lineage[lineage == "recombinant"] <- "Recombinant"

offset <- 550
rotation <- 0.68 #radians
df <- data.frame(x = ((t-offset)*cos(thetas + rotation))[t>offset], y = ((t-offset)*sin(thetas + rotation))[t>offset], lineage = lineage[t>offset])
df_standard <- data.frame(x = t, y = thetas, lineage = lineage)

colors <- c(
  '#482a43',
  '#baa0b5',
  '#37495e',
  '#2b24a9',
  '#41481a',
  '#94558a',
  '#442b33',
  '#5a6a0a',
  '#ff7566',
  '#640308',
  '#ab7971',
  '#00607f',
  '#404b89',
  '#ddb4e1',
  '#000000',
  '#cccccc'
)

ggplot(df, aes(x=x,y=y,color=lineage)) +
  geom_point(size = 0.05) +
  scale_color_manual(values = colors, name = NULL) +
  scale_x_continuous(breaks = NULL) +
  scale_y_continuous(breaks = NULL) +
  coord_fixed() +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    legend.direction = "horizontal",
    legend.position=c(0.45, -0.05),
    legend.text = element_text(size=6),
    legend.key.width= unit(0.1, 'cm'),
    legend.key.height= unit(0.3, 'cm'),
    plot.margin = margin(0,-1.4,2,0, "cm")
  ) +
  guides(color = guide_legend(override.aes = list(size = 1)))

ggsave("./figs/radial.pdf", width=6.5, height = 8)
ggsave("./figs/radial.png", width=6.5, height = 8)



# vertical segments
xs <- c()
ystart <- c()
yend <- c()
for (i in 1:n) {
  kids <- which(h == i)
  if(length(kids) > 0){
    xs <- c(xs, t[i])
    ystart <- c(ystart, min(thetas[kids]))
    yend <- c(yend, max(thetas[kids]))
  }
}

# vertical segments

big <- ggplot() +
  geom_segment(mapping = aes(x = t[h], xend = t, y = thetas, yend = thetas), linewidth = 0.1) +
  geom_segment(mapping = aes(x = xs, xend = xs, y = ystart, yend = yend), linewidth = 0.1) +
  geom_point(mapping= aes(x = df_standard$x, y = df_standard$y, color = df_standard$lineage), size = 0.5) +
  scale_color_manual(values = colors, name = "Lineage") +
  xlab("Evolutionary Time (days)") +
  scale_y_continuous(breaks = NULL) +
  theme_minimal() +
  theme(axis.title.y = element_blank())

big

ggsave("./figs/big.pdf", width = 20, height = 400, limitsize = F)


# table(lineage[h[which(lineage == "22E")]])
# weird <- which(lineage == "22E" & lineage[h] == "22B (Omicron)")
#
# i <- h[weird[3]]
# j <- weird[3]
#
# mini_cons <- cons[c(i-1, j-1)]
# dist.dna(mini_cons, "N")
#
# mcmc <- output[[10000]]

